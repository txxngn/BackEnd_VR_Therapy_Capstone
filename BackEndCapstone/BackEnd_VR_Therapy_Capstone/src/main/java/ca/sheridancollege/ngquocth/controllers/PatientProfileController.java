package ca.sheridancollege.ngquocth.controllers;

import java.util.List;
import java.util.Optional;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import ca.sheridancollege.ngquocth.beans.PatientProfile;
import ca.sheridancollege.ngquocth.repositories.PatientProfileRepository;
import lombok.AllArgsConstructor;

@RestController
@AllArgsConstructor
@RequestMapping("/patients")
public class PatientProfileController {
	
	
	private final PatientProfileRepository patientRepo;

    //get all patients
    @GetMapping(value = {"", "/"})
    public List<PatientProfile> getAllPatients() {
        return patientRepo.findAll();
    }

    //get patient by ID
    @GetMapping("/{id}")
    public ResponseEntity<PatientProfile> getPatientById(@PathVariable Long id) {
        return patientRepo.findById(id)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    //create new patient
    @PostMapping(value={""}, headers= {"Content-type=application/json"})
    public PatientProfile addPatient(@RequestBody PatientProfile patient) {
        patient.setUserId(null);  			//ensure ID is generated by User
        return patientRepo.save(patient);
    }

    //Update existing patient
    @PutMapping(value = {"/{id}"}, headers= {"Content-type=application/json"})
    public ResponseEntity<PatientProfile> updatePatient(@PathVariable Long id, @RequestBody PatientProfile patient) {
        Optional<PatientProfile> existingPatient = patientRepo.findById(id);
        if (existingPatient.isPresent()) {
            patient.setUserId(id);
            return ResponseEntity.ok(patientRepo.save(patient));
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    
    
    
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deletePatient(@PathVariable Long id) {
        if (patientRepo.existsById(id)) {
            patientRepo.deleteById(id);
            return ResponseEntity.ok().build();
        }
        return ResponseEntity.notFound().build();
    }
    
    
    
    
    
    
    
    
	
}
