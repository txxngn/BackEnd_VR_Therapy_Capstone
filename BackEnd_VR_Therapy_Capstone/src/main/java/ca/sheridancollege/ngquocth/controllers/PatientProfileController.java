package ca.sheridancollege.ngquocth.controllers;

import java.util.List;


import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import ca.sheridancollege.ngquocth.beans.PatientProfile;
import ca.sheridancollege.ngquocth.repositories.PatientProfileRepository;
import lombok.AllArgsConstructor;

@RestController
@AllArgsConstructor
@RequestMapping("/patients")
public class PatientProfileController {
	
	
	private final PatientProfileRepository patientRepo;

    //get all patients - not necessary anymore
    @GetMapping(value = {"", "/"})
    public List<PatientProfile> getAllPatients() {
        return patientRepo.findAll();
    }


    //create new patient  - used only by admin now
    @PostMapping(value={""}, headers= {"Content-type=application/json"})
    public PatientProfile addPatient(@RequestBody PatientProfile patient) {
        patient.setUserId(null);  			//ensure ID is generated by User
        return patientRepo.save(patient);
    }

    
    
    
    //view their own profile without needing the ID
    @GetMapping("/profile")
    public ResponseEntity<?> getOwnProfile(@AuthenticationPrincipal UserDetails userDetails) {
    	PatientProfile patient = patientRepo.findByEmail(userDetails.getUsername())
            .orElseThrow(() -> new RuntimeException("Patient not found"));
        return ResponseEntity.ok(patient);
    }
    
    
    //Secure update profile without expose the id of the patient
    @PutMapping("/profile")
    public ResponseEntity<?> updatePatientProfile(
            @AuthenticationPrincipal UserDetails userDetails,
            @RequestBody PatientProfile updatedProfile) {

        PatientProfile patient = patientRepo.findByEmail(userDetails.getUsername())
            .orElseThrow(() -> new RuntimeException("Patient not found"));

        patient.setFullName(updatedProfile.getFullName());
        patient.setDateOfBirth(updatedProfile.getDateOfBirth());
        patient.setGender(updatedProfile.getGender());
        patient.setAnxietyLevel(updatedProfile.getAnxietyLevel());
        patient.setHeartRate(updatedProfile.getHeartRate());
        patient.setTherapyGoal(updatedProfile.getTherapyGoal());

        patientRepo.save(patient);
        return ResponseEntity.ok("Patient profile updated successfully.");
    }

    
    
    //Secure delete
    @DeleteMapping("/profile")
    public ResponseEntity<?> deletePatientProfile(@AuthenticationPrincipal UserDetails userDetails) {
        PatientProfile patient = patientRepo.findByEmail(userDetails.getUsername())
            .orElseThrow(() -> new RuntimeException("Patient not found"));

        patientRepo.delete(patient);
        return ResponseEntity.ok("Patient profile deleted successfully.");
    }
    
    
    
    
    
    
    
    
	
}
